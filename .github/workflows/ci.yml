name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: family_password
          POSTGRES_USER: family_user
          POSTGRES_DB: family_planner
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run mypy type checking
      working-directory: ./backend
      run: mypy app --ignore-missing-imports
    
    - name: Run tests
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://family_user:family_password@localhost:5432/family_planner
        SECRET_KEY: test-secret-key
      run: |
        pytest tests/ -v --cov=app --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false

  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: ./frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Run linting
      working-directory: ./frontend
      run: npm run lint
    
    - name: Run type checking
      working-directory: ./frontend
      run: npx tsc --noEmit
    
    - name: Run unit tests
      working-directory: ./frontend
      run: npm run test:coverage
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage
        fail_ci_if_error: false

  e2e-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Create .env file
      run: |
        cp .env.example .env
        # Override API URL for Docker container communication
        sed -i 's|VITE_API_URL=http://localhost:8000|VITE_API_URL=http://backend:8000|g' .env
    
    - name: Build and start services
      run: docker compose up --build -d
    
    - name: Debug container status
      run: |
        echo "=== Docker containers status ==="
        docker compose ps
        echo "=== Docker containers logs ==="
        docker compose logs
    
    - name: Wait for services to be ready
      run: |
        # Wait for frontend service
        for i in {1..60}; do
          if curl -f http://localhost:3000 >/dev/null 2>&1; then
            echo "Frontend is ready"
            break
          fi
          echo "Waiting for frontend... ($i/60)"
          sleep 2
        done
        
        # Wait for backend service
        for i in {1..60}; do
          if curl -f http://localhost:8000/health >/dev/null 2>&1; then
            echo "Backend is ready"
            break
          fi
          echo "Waiting for backend... ($i/60)"
          sleep 2
        done
        
        # Verify both services are responding
        curl -f http://localhost:3000
        curl -f http://localhost:8000/health
    
    - name: Install E2E test dependencies
      working-directory: ./e2e-tests
      run: |
        npm ci
        npx playwright install chromium
    
    - name: Run E2E tests
      working-directory: ./e2e-tests
      run: npm test
    
    - name: Upload E2E test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: e2e-tests/playwright-report/
        retention-days: 30
    
    - name: Stop services
      if: always()
      run: docker compose down

  docker-build:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Create .env file
      run: |
        cp .env.example .env
        # Override API URL for Docker container communication
        sed -i 's|VITE_API_URL=http://localhost:8000|VITE_API_URL=http://backend:8000|g' .env
    
    - name: Build Docker images
      run: docker compose build
    
    - name: Test Docker services startup
      run: |
        docker compose up -d
        timeout 120s bash -c 'until curl -f http://localhost:3000; do sleep 2; done'
        timeout 120s bash -c 'until curl -f http://localhost:8000/health; do sleep 2; done'
        docker compose down
